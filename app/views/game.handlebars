<h1>Vee/Ess</h1>
<script type="text/javascript">
var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });

function preload() {
    game.load.spritesheet('thor', '/assets/images/Thor.png', 32, 32);
}

var ship1;
function create() {
    game.physics.startSystem(Phaser.Physics.ARCADE);
    ship1 = game.add.sprite(200, 200, 'thor', 1);
    ship1.animations.add('default', [0,1,2,3], 8, true);
    ship1.animations.play('default');
    ship1.anchor.setTo(0.5);
    game.physics.arcade.enable(ship1);
}

function accelerate(sprite, speed) {
 game.physics.arcade.accelerationFromRotation(sprite.rotation - (Math.PI/2), speed, ship1.body.acceleration);
}

var maxAngularAcceleration = 20;
var maxAngularVelocity = 50;
function nextVelocity(currentAngularVelocity, currentAngle, desiredAngle) {
    angleError = Math.abs(desiredAngle - currentAngle);
    var relativeVelocity = desiredAngle < currentAngle ? -1 : 1;
    
    // Base Case: angleError is within angular acceleration
    if (angleError <= maxAngularAcceleration) {
        return relativeVelocity * angleError;
    }
    
    console.log('angle error: ' + angleError);
    // Choose some new velocity within range of current
    // velocity such that 
    // (angleError - VInRange) >= stopping distance
    // stopping distance is equal to
    // (VInRange / 2) * (VInRange/maxAngularAcceleration - 1);
    // http://www.wolframalpha.com/input/?i=solve+for+x+:+%5B%2F%2Fmath:y-x+%3E%3D+(x+%2F+2)+*+(x%2Fz+-+1)%2F%2F%5D
    bestVelocity = Math.floor(0.5 * Math.sqrt(8*angleError*maxAngularAcceleration + maxAngularAcceleration^2) - (maxAngularAcceleration/2));
    console.log('best: ' + bestVelocity);
    
    tickMaxVelocity = Math.min(relativeVelocity * currentAngularVelocity + maxAngularAcceleration, maxAngularVelocity);
    console.log('tick max: ' + tickMaxVelocity);
    
    achieveableVelocity = relativeVelocity * Math.min(tickMaxVelocity, bestVelocity);
    console.log('achieveable: ' + achieveableVelocity);
    return achieveableVelocity;
}

var desiredAngle = 0;
function update() {
    if (game.input.mousePointer.isDown) {
        desiredAngle = game.math.radToDeg(game.physics.arcade.angleToPointer(ship1)) + 90; //sprite image is rotated 90 degrees... need better fix for this
    }
    nextAngularVelocity = nextVelocity(ship1.body.angularVelocity, ship1.angle, desiredAngle);
    ship1.body.angularVelocity = nextAngularVelocity;
}
</script>