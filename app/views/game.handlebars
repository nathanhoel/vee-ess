<h1>Vee/Ess</h1>
<script type="text/javascript">
var game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });

function preload() {
    game.load.spritesheet('thor', '/assets/images/Thor.png', 32, 32);
}

var ship1;
function create() {
    game.physics.startSystem(Phaser.Physics.ARCADE);
    ship1 = game.add.sprite(200, 200, 'thor', 1);
    ship1.animations.add('default', [0,1,2,3], 8, true);
    ship1.animations.play('default');
    ship1.anchor.setTo(0.5);
    game.physics.arcade.enable(ship1);
    ship1.body.drag.set(5);
    ship1.body.maxVelocity = 50;
    ship1.body.angularDrag = 5;
    ship1.body.maxAngular = 50;
}

function accelerate(sprite, speed) {
 game.physics.arcade.accelerationFromRotation(sprite.rotation - (Math.PI/2), speed, ship1.body.acceleration);
}

var maxAngularAcceleration = 6;
var maxAngularVelocity = 20;
function nextVelocity(currentAngularVelocity, currentAngle, desiredAngle) {
    angleError = desiredAngle - currentAngle;
    
    // Base Case: angleError is within angular acceleration
    if (angleError <= maxAngularAcceleration) {
        return angleError;
    }
    
    // Choose some new velocity within range of current
    // velocity such that 
    // (angleError - VInRange) >= stopping distance
    // stopping distance is equal to
    // (VInRange / 2) * (VInRange/maxAngularAcceleration - 1);
    // http://www.wolframalpha.com/input/?i=solve+for+x+:+%5B%2F%2Fmath:y-x+%3E%3D+(x+%2F+2)+*+(x%2Fz+-+1)%2F%2F%5D
    bestVelocity = Math.floor(0.5 * Math.sqrt(8*angleError*maxAngularAcceleration + maxAngularAcceleration^2) - (maxAngularAcceleration/2));
    
    achieveableVelocity = Math.min(Math.min(currentAngularVelocity + maxAngularAcceleration, maxAngularVelocity), bestVelocity);
    return achieveableVelocity;
}

function update() {
}
</script>